/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4-rc-1/userguide/java_library_plugin.html
 */

plugins {
    id 'org.springframework.boot' version '2.1.0.RELEASE'
    id "org.sonarqube" version "2.5"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java-library'
apply plugin: 'java'


repositories {
   maven {             
          url "https://nexus.delta.com/repository/maven-public/"
    }
}


apply plugin: "jacoco"

dependencies {

	compile project(':api-clients')
	
    implementation ('org.springframework.boot:spring-boot-starter'){
      
    }
	implementation ('org.springframework.boot:spring-boot-starter-web'){
		
	}
	implementation('org.springframework.boot:spring-boot-starter-data-rest'){
	   
	}
	testCompile('org.springframework.boot:spring-boot-starter-test'){
	   
	}

	//runtimeOnly 'mysql:mysql-connector-java'
	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'

    compile "org.springframework.boot:spring-boot-starter-data-jpa:1.3.5.RELEASE"
	compile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final"
	compile  "com.h2database:h2:1.4.199"
	
	//compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '1.2.0.RELEASE'
	compile group: 'org.springframework', name: 'spring-aspects', version: '3.2.0.RELEASE'
	
	compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.7.3'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
	compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.0'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
   // providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    }
jacocoTestReport {	
   reports {		
      xml {			
       enabled true //coveralls plugin depends on xml format report		
          }				
     html {			
     enabled true		
          }	
}

   afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/assembler/**','**/util/**','**/aspect/**','**/repository/**','**/resource/**',
                              '**/exception/**', '**/entity/**'])
        })
    }

}

sonarqube {	
   properties {		
               property "sonar.projectName", "${rootProject.name}"		
               property "sonar.projectKey", "com.delta.rideshare.notification"		
               property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"	
               property 'sonar.coverage.exclusions', "'**/assembler/**','**/util/**','**/aspect/**','**/repository/**','**/resource/**','**/exception/**', '**/entity/**'"
        }
        
    }
    
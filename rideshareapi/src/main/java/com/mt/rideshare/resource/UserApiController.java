package com.mt.rideshare.resource;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.mt.rideshare.service.UserService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.rideshare.api.UserApi;
import io.swagger.rideshare.model.Error;
import io.swagger.rideshare.model.User;
@Controller
@Api(value = "user", description = "the user API")
public class UserApiController implements UserApi {


	@Autowired
	UserService userService;
	
    @ApiOperation(value = "", notes = "This resource authenticates a logging user.", response = User.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = {
            
            })
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found.", response = Error.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error.", response = Error.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = Error.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = Error.class),
        @ApiResponse(code = 504, message = "Gateway Timeout", response = Error.class) })
    
    @RequestMapping(value = "/user/auth",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    public ResponseEntity<User> auth(@ApiParam(value = "User API Request Object" ,required=true )  @Valid @RequestBody User user,@ApiParam(value = "A unique id for each request generated by each application" ) @RequestHeader(value="transactionId", required=false) String transactionId,@ApiParam(value = "The Id of the application within the channel making the request" ) @RequestHeader(value="appId", required=false) String appId,@ApiParam(value = "The Id of the channel making the request" ) @RequestHeader(value="channelId", required=false) String channelId) {
    	User userDetails = userService.authenticateUser(user);
		return new ResponseEntity<User>(userDetails, HttpStatus.OK);
    }


    @ApiOperation(value = "", notes = "This resource creates a user. A user can be a driver or rider", response = User.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = {
            
            })
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found.", response = Error.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = Error.class),
        @ApiResponse(code = 500, message = "Internal Server Error.", response = Error.class),
        @ApiResponse(code = 502, message = "Bad Gateway", response = Error.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = Error.class),
        @ApiResponse(code = 504, message = "Gateway Timeout", response = Error.class) })
    
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    public ResponseEntity<User> createUser(@ApiParam(value = "Create User API Request Object" ,required=true )  @Valid @RequestBody User user,@ApiParam(value = "A unique id for each request generated by each application" ) @RequestHeader(value="transactionId", required=false) String transactionId,@ApiParam(value = "The Id of the application within the channel making the request" ) @RequestHeader(value="appId", required=false) String appId,@ApiParam(value = "The Id of the channel making the request" ) @RequestHeader(value="channelId", required=false) String channelId) {
    	userService.insertUser(user);
		return new ResponseEntity<User>(HttpStatus.OK);
    }


}

package com.mt.rideshare.resource;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.mt.rideshare.service.TripService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.rideshare.api.TripApi;
import io.swagger.rideshare.model.Error;
import io.swagger.rideshare.model.Trip;

@Controller
@Api(value = "trip", description = "the trip API")
public class TripApiController implements TripApi {

	@Autowired
	TripService tripService;

	@ApiOperation(value = "", notes = "This resource used to cancle entire trip by driver.", response = Trip.class, authorizations = {
			@Authorization(value = "OauthSecurity", scopes = {

			}) }, tags = { "Trip", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Trip.class),
			@ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found.", response = Error.class),
			@ApiResponse(code = 429, message = "Too Many Requests", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error.", response = Error.class),
			@ApiResponse(code = 502, message = "Bad Gateway", response = Error.class),
			@ApiResponse(code = 503, message = "Service Unavailable", response = Error.class),
			@ApiResponse(code = 504, message = "Gateway Timeout", response = Error.class) })

	@RequestMapping(value = "/trip/cancel/{tripId}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	public ResponseEntity<Trip> cancelTrip(
			@ApiParam(value = "unique id of the trip", required = true) @PathVariable("tripId") String tripId,
			@ApiParam(value = "A unique id for each request generated by each application") @RequestHeader(value = "transactionId", required = false) String transactionId,
			@ApiParam(value = "The Id of the application within the channel making the request") @RequestHeader(value = "appId", required = false) String appId,
			@ApiParam(value = "The Id of the channel making the request") @RequestHeader(value = "channelId", required = false) String channelId) {
		Trip canceledTrip = tripService.cancelTrip(tripId);
		return new ResponseEntity<Trip>(canceledTrip, HttpStatus.OK);
	}

	@ApiOperation(value = "", notes = "This resource will be used to post a trip by driver.", response = Trip.class, authorizations = {
			@Authorization(value = "OauthSecurity", scopes = {

			}) }, tags = { "Trip", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Trip.class),
			@ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found.", response = Error.class),
			@ApiResponse(code = 429, message = "Too Many Requests", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error.", response = Error.class),
			@ApiResponse(code = 502, message = "Bad Gateway", response = Error.class),
			@ApiResponse(code = 503, message = "Service Unavailable", response = Error.class),
			@ApiResponse(code = 504, message = "Gateway Timeout", response = Error.class) })

	@RequestMapping(value = "/trip", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	public ResponseEntity<Trip> createTrip(
			@ApiParam(value = "Trip API Request Object", required = true) @Valid @RequestBody Trip trip,
			@ApiParam(value = "A unique id for each request generated by each application") @RequestHeader(value = "transactionId", required = false) String transactionId,
			@ApiParam(value = "The Id of the application within the channel making the request") @RequestHeader(value = "appId", required = false) String appId,
			@ApiParam(value = "The Id of the channel making the request") @RequestHeader(value = "channelId", required = false) String channelId) {
		Trip tripDetails = tripService.createTrip(trip);
		trip.setId(tripDetails.getId());
		return new ResponseEntity<Trip>(trip, HttpStatus.OK);
	}

	@ApiOperation(value = "", notes = "This resource used to search all the available trips based on the search criteria.", response = Trip.class, responseContainer = "List", authorizations = {
			@Authorization(value = "OauthSecurity", scopes = {

			}) }, tags = { "Trip", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Trip.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found.", response = Error.class),
			@ApiResponse(code = 429, message = "Too Many Requests", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error.", response = Error.class),
			@ApiResponse(code = 502, message = "Bad Gateway", response = Error.class),
			@ApiResponse(code = 503, message = "Service Unavailable", response = Error.class),
			@ApiResponse(code = 504, message = "Gateway Timeout", response = Error.class) })

	@RequestMapping(value = "/trip/search", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	public ResponseEntity<List<Trip>> searchTrips(
			@NotNull @ApiParam(value = "Source/origin of the trip", required = true) @RequestParam(value = "source", required = true) String source,
			@NotNull @ApiParam(value = "destination of the trip", required = true) @RequestParam(value = "destination", required = true) String destination,
			@NotNull @ApiParam(value = "Start time of the trip", required = true) @RequestParam(value = "time", required = true) String time,
			@ApiParam(value = "A unique id for each request generated by each application") @RequestHeader(value = "transactionId", required = false) String transactionId,
			@ApiParam(value = "The Id of the application within the channel making the request") @RequestHeader(value = "appId", required = false) String appId,
			@ApiParam(value = "The Id of the channel making the request") @RequestHeader(value = "channelId", required = false) String channelId) {
		List<Trip> trips = tripService.findAvailbaleTrips(source, destination, time);
		return new ResponseEntity<List<Trip>>(trips, HttpStatus.OK);
	}

}

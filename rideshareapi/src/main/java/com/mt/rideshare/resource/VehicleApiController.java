package com.mt.rideshare.resource;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.mt.rideshare.db.entity.Vehicalinfo;
import com.mt.rideshare.service.VehicleService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.rideshare.api.VehicleApi;
import io.swagger.rideshare.model.Error;
import io.swagger.rideshare.model.User;
import io.swagger.rideshare.model.Vehicle;

@Controller
@Api(value = "vehicle", description = "the vehicle API")
public class VehicleApiController implements VehicleApi {

	@Autowired
	VehicleService vehicleService;

	@ApiOperation(value = "", notes = "This resource check the eligibility and then complete the fulfillment process for Order or Pnr or Document or no Document.", response = Vehicle.class, authorizations = {
			@Authorization(value = "OauthSecurity", scopes = {

			}) }, tags = { "create User", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Vehicle.class),
			@ApiResponse(code = 400, message = "Bad Request.", response = Error.class),
			@ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
			@ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
			@ApiResponse(code = 404, message = "Not Found.", response = Error.class),
			@ApiResponse(code = 429, message = "Too Many Requests", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error.", response = Error.class),
			@ApiResponse(code = 502, message = "Bad Gateway", response = Error.class),
			@ApiResponse(code = 503, message = "Service Unavailable", response = Error.class),
			@ApiResponse(code = 504, message = "Gateway Timeout", response = Error.class) })

	@RequestMapping(value = "/vehicle", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	public ResponseEntity<Vehicle> vehicleRegistration(
			@ApiParam(value = "Cancel Accountable Document Fulfillment API Request Object", required = true) @Valid @RequestBody Vehicle vehicle,
			@ApiParam(value = "A unique id for each request generated by each application") @RequestHeader(value = "transactionId", required = false) String transactionId,
			@ApiParam(value = "The Id of the application within the channel making the request") @RequestHeader(value = "appId", required = false) String appId,
			@ApiParam(value = "The Id of the channel making the request") @RequestHeader(value = "channelId", required = false) String channelId) {

		vehicleService.saveVehicle(vehicle);

		return new ResponseEntity<Vehicle>(vehicle, HttpStatus.OK);
	}

	@RequestMapping(value = "/vehicle/search", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	public ResponseEntity<List<Vehicle>> vehicleInventory(
			@ApiParam(value = "User API Request Object", required = true) @Valid @RequestBody User vehicle,
			@ApiParam(value = "A unique id for each request generated by each application") @RequestHeader(value = "transactionId", required = false) String transactionId,
			@ApiParam(value = "The Id of the application within the channel making the request") @RequestHeader(value = "appId", required = false) String appId,
			@ApiParam(value = "The Id of the channel making the request") @RequestHeader(value = "channelId", required = false) String channelId) {

		List<Vehicalinfo> vehicleInfoList = vehicleService.searchVehicles(vehicle.getUsername());
		List<Vehicle> vehicleList = mapVehicleInfoToVehicle(vehicleInfoList);
		return new ResponseEntity<List<Vehicle>>(vehicleList, HttpStatus.OK);
	}

	private List<Vehicle> mapVehicleInfoToVehicle(List<Vehicalinfo> vehicleInfoList) {
		List<Vehicle> vehicleList = new ArrayList<Vehicle>();
		if (vehicleInfoList != null && vehicleInfoList.size() > 0) {
			for (Vehicalinfo vehicleInfo : vehicleInfoList) {
				Vehicle vehicle = new Vehicle();

				vehicle.setColor(vehicleInfo.getColor());
				vehicle.setLicensePlateNum(vehicleInfo.getLicensePlate());
				vehicle.setLuggageCapacity(vehicleInfo.getLuggageCapacity());
				vehicle.setPassengerCapacity(vehicleInfo.getPassengerCapacity());
				vehicle.setStatus(vehicleInfo.getStatus());
				vehicle.setType(vehicleInfo.getType());
				vehicleList.add(vehicle);
			}
		}
		return vehicleList;
	}

}

/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Student;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-31T06:06:48.387Z")

@Api(value = "student", description = "the student API")
public interface StudentApi {

    @ApiOperation(value = "create a new student", nickname = "addStudent", notes = "", tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid Input") })
    @RequestMapping(value = "/student",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addStudent(@ApiParam(value = "add student from the api" ,required=true )  @Valid @RequestBody Student body);


    @ApiOperation(value = "Delete the Student", nickname = "deletePet", notes = "", tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/student/{studentId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePet(@ApiParam(value = "delete student from the api",required=true) @PathVariable("studentId") Long studentId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "find specific student details", nickname = "findStudentId", notes = "", response = Student.class, tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Founded", response = Student.class),
        @ApiResponse(code = 400, message = "Invalid ID"),
        @ApiResponse(code = 404, message = "Student ID Not Found") })
    @RequestMapping(value = "/student/{studentId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<Student> findStudentId(@ApiParam(value = "find specfic student from the api",required=true) @PathVariable("studentId") Integer studentId);


    @ApiOperation(value = "find all students details", nickname = "findStudents", notes = "", tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Founded"),
        @ApiResponse(code = 404, message = "Students Not Found") })
    @RequestMapping(value = "/student",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<Void> findStudents();


    @ApiOperation(value = "update the student", nickname = "updateStudent", notes = "", tags={ "student", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID"),
        @ApiResponse(code = 404, message = "Student Not Found"),
        @ApiResponse(code = 405, message = "Validation Exception") })
    @RequestMapping(value = "/student",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateStudent(@ApiParam(value = "update student from the api" ,required=true )  @Valid @RequestBody Student body);

}

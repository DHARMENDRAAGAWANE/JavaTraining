/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Course;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-31T06:06:48.387Z")

@Api(value = "course", description = "the course API")
public interface CourseApi {

    @ApiOperation(value = "create a new course", nickname = "addCourse", notes = "", tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid Input") })
    @RequestMapping(value = "/course",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addCourse(@ApiParam(value = "add course from the api" ,required=true )  @Valid @RequestBody Course body);


    @ApiOperation(value = "Delete the Course", nickname = "deleteCourse", notes = "", tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @RequestMapping(value = "/course/{courseId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCourse(@ApiParam(value = "delete course from the api",required=true) @PathVariable("courseId") Long courseId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "find specfic course details", nickname = "findCourseId", notes = "", response = Course.class, tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Founded", response = Course.class),
        @ApiResponse(code = 400, message = "Invalid ID"),
        @ApiResponse(code = 404, message = "Course ID Not Found") })
    @RequestMapping(value = "/course/{courseId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<Course> findCourseId(@ApiParam(value = "find specfic course from the api",required=true) @PathVariable("courseId") Integer courseId);


    @ApiOperation(value = "find all course details", nickname = "findCourses", notes = "", tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Founded"),
        @ApiResponse(code = 404, message = "Courses Not Found") })
    @RequestMapping(value = "/course",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<Void> findCourses();


    @ApiOperation(value = "update the course", nickname = "updateCourse", notes = "", tags={ "course", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID"),
        @ApiResponse(code = 404, message = "Course Not Found"),
        @ApiResponse(code = 405, message = "Validation Exception") })
    @RequestMapping(value = "/course",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCourse(@ApiParam(value = "update course from the api" ,required=true )  @Valid @RequestBody Course body);

}
